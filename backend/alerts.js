// backend/alerts.js - Regional Alert Management System
import { getRegionalPreference, insertAlert, getFromSQLite } from '../database/db.js';
import { sendSMS } from '../bot/bot.js';
import { sendFast2SMS, sendBulkFast2SMS } from '../bot/fast2sms.js';
import { sendWhatsAppMessage, sendHealthAlert } from '../bot/whatsapp.js';

/**
 * Broadcast health alert to users based on regional preferences
 */
export async function broadcastRegionalAlert(disease, location, severity = 'medium', message) {
  try {
    console.log(`üö® Broadcasting ${severity} alert for ${disease} in ${location}`);
    
    // Store alert in database
    await insertAlert(disease, location);
    
    // Get regional preference for the location
    const preference = await getRegionalPreference(location);
    
    if (!preference || !preference.notification_enabled) {
      console.log(`‚ÑπÔ∏è No notifications enabled for region: ${location}`);
      return { success: true, sent: 0, skipped: 'notifications_disabled' };
    }
    
    // Format alert message
    const alertMessage = formatAlertMessage(disease, location, severity, message, preference.language_preference);
    
    // Dispatch via preferred contact method
    let dispatchResult = { success: false, sent: 0, errors: [] };
    
    switch (preference.contact_method) {
      case 'whatsapp':
        dispatchResult = await dispatchWhatsAppAlert(alertMessage, severity);
        break;
      case 'sms':
        dispatchResult = await dispatchSMSAlert(alertMessage);
        break;
      case 'both':
        const smsResult = await dispatchSMSAlert(alertMessage);
        const whatsappResult = await dispatchWhatsAppAlert(alertMessage, severity);
        dispatchResult = {
          success: smsResult.success || whatsappResult.success,
          sent: smsResult.sent + whatsappResult.sent,
          errors: [...smsResult.errors, ...whatsappResult.errors]
        };
        break;
      default:
        console.log(`‚ö†Ô∏è Unknown contact method: ${preference.contact_method}`);
    }
    
    console.log(`‚úÖ Alert dispatch complete: ${dispatchResult.sent} sent, ${dispatchResult.errors.length} errors`);
    return dispatchResult;
    
  } catch (error) {
    console.error('‚ùå Regional alert broadcast failed:', error);
    return { success: false, sent: 0, errors: [error.message] };
  }
}

/**
 * Format alert message based on language preference
 */
function formatAlertMessage(disease, location, severity, customMessage, language = 'en') {
  const severityEmojis = {
    low: '‚ö†Ô∏è',
    medium: 'üö®',
    high: 'üî¥',
    critical: 'üÜò'
  };
  
  const emoji = severityEmojis[severity] || '‚ö†Ô∏è';
  
  // Basic multi-language support
  const templates = {
    en: `${emoji} HEALTH ALERT - ODISHA\n\nü¶† Disease: ${disease.toUpperCase()}\nüìç Location: ${location}\n‚ö° Severity: ${severity.toUpperCase()}\n\n${customMessage || getDefaultMessage(disease, language)}\n\nüÜò Emergency: 108\nüíä Health Info: Text HELP`,
    hi: `${emoji} ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä - ‡§ì‡§°‡§ø‡§∂‡§æ\n\nü¶† ‡§∞‡•ã‡§ó: ${disease.toUpperCase()}\nüìç ‡§∏‡•ç‡§•‡§æ‡§®: ${location}\n‚ö° ‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ: ${severity.toUpperCase()}\n\n${customMessage || getDefaultMessage(disease, 'hi')}\n\nüÜò ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: 108\nüíä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä: HELP ‡§≠‡•á‡§ú‡•á‡§Ç`,
    or: `${emoji} ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ - ‡¨ì‡¨°‡¨ø‡¨∂‡¨æ\n\nü¶† ‡¨∞‡≠ã‡¨ó: ${disease.toUpperCase()}\nüìç ‡¨∏‡≠ç‡¨•‡¨æ‡¨®: ${location}\n‚ö° ‡¨ó‡¨Æ‡≠ç‡¨≠‡≠Ä‡¨∞‡¨§‡¨æ: ${severity.toUpperCase()}\n\n${customMessage || getDefaultMessage(disease, 'or')}\n\nüÜò ‡¨ú‡¨∞‡≠Å‡¨∞‡≠Ä‡¨ï‡¨æ‡¨≥‡≠Ä‡¨®: 108\nüíä ‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ: HELP ‡¨™‡¨†‡¨æ‡¨®‡≠ç‡¨§‡≠Å`
  };
  
  return templates[language] || templates.en;
}

/**
 * Get default prevention message for a disease
 */
function getDefaultMessage(disease, language = 'en') {
  const messages = {
    en: {
      malaria: "Take precautions: Use mosquito nets, remove stagnant water, seek medical help if fever.",
      dengue: "Prevention: Eliminate standing water, use repellents, watch for high fever and body pain.",
      cholera: "Safety: Drink boiled water, maintain hygiene, seek immediate medical attention for severe symptoms.",
      default: "Follow health guidelines, maintain hygiene, seek medical advice if symptoms appear."
    },
    hi: {
      malaria: "‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä: ‡§Æ‡§ö‡•ç‡§õ‡§∞‡§¶‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç, ‡§ú‡§Æ‡§æ ‡§™‡§æ‡§®‡•Ä ‡§π‡§ü‡§æ‡§è‡§Ç, ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç‡•§",
      dengue: "‡§∞‡•ã‡§ï‡§•‡§æ‡§Æ: ‡§ñ‡§°‡§º‡§æ ‡§™‡§æ‡§®‡•Ä ‡§π‡§ü‡§æ‡§è‡§Ç, ‡§∞‡§ø‡§™‡•á‡§≤‡•á‡§Ç‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç, ‡§§‡•á‡§ú ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§î‡§∞ ‡§∂‡§∞‡•Ä‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç‡•§",
      cholera: "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ: ‡§â‡§¨‡§≤‡§æ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç, ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç, ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç‡•§",
      default: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡§ø‡§∂‡§æ-‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç, ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¶‡§ø‡§ñ‡§®‡•á ‡§™‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
    },
    or: {
      malaria: "‡¨∏‡¨§‡¨∞‡≠ç‡¨ï‡¨§‡¨æ: ‡¨Æ‡¨∂‡¨æ ‡¨ú‡¨æ‡¨≤‡¨ø ‡¨¨‡≠ç‡≠ü‡¨¨‡¨π‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨ú‡¨Æ‡¨æ ‡¨™‡¨æ‡¨£‡¨ø ‡¨π‡¨ü‡¨æ‡¨®‡≠ç‡¨§‡≠Å, ‡¨ú‡≠ç‡≠±‡¨∞ ‡¨π‡≠á‡¨≤‡≠á ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡≠Ä ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§",
      dengue: "‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨∞‡≠ã‡¨ß: ‡¨†‡¨ø‡¨Ü ‡¨™‡¨æ‡¨£‡¨ø ‡¨π‡¨ü‡¨æ‡¨®‡≠ç‡¨§‡≠Å, ‡¨∞‡¨ø‡¨™‡≠á‡¨≤‡≠á‡¨£‡≠ç‡¨ü ‡¨¨‡≠ç‡≠ü‡¨¨‡¨π‡¨æ‡¨∞ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨â‡¨ö‡≠ç‡¨ö ‡¨ú‡≠ç‡≠±‡¨∞ ‡¨è‡¨¨‡¨Ç ‡¨∂‡¨∞‡≠Ä‡¨∞ ‡¨Ø‡¨®‡≠ç‡¨§‡≠ç‡¨∞‡¨£‡¨æ ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡¨§‡¨∞‡≠ç‡¨ï ‡¨∞‡¨π‡¨®‡≠ç‡¨§‡≠Å‡•§",
      cholera: "‡¨∏‡≠Å‡¨∞‡¨ï‡≠ç‡¨∑‡¨æ: ‡¨´‡≠Å‡¨ü‡¨æ ‡¨™‡¨æ‡¨£‡¨ø ‡¨™‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å, ‡¨∏‡≠ç‡≠±‡¨ö‡≠ç‡¨õ‡¨§‡¨æ ‡¨¨‡¨ú‡¨æ‡≠ü ‡¨∞‡¨ñ‡¨®‡≠ç‡¨§‡≠Å, ‡¨ó‡¨Æ‡≠ç‡¨≠‡≠Ä‡¨∞ ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨™‡¨æ‡¨á‡¨Å ‡¨§‡≠Å‡¨∞‡¨®‡≠ç‡¨§ ‡¨ö‡¨ø‡¨ï‡¨ø‡¨§‡≠ç‡¨∏‡¨æ ‡¨∏‡¨æ‡¨π‡¨æ‡¨Ø‡≠ç‡≠ü ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§",
      default: "‡¨∏‡≠ç‡≠±‡¨æ‡¨∏‡≠ç‡¨•‡≠ç‡≠ü ‡¨®‡¨ø‡¨∞‡≠ç‡¨¶‡≠ç‡¨¶‡≠á‡¨∂‡¨æ‡¨¨‡¨≥‡≠Ä ‡¨Ö‡¨®‡≠Å‡¨∏‡¨∞‡¨£ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å, ‡¨∏‡≠ç‡≠±‡¨ö‡≠ç‡¨õ‡¨§‡¨æ ‡¨¨‡¨ú‡¨æ‡≠ü ‡¨∞‡¨ñ‡¨®‡≠ç‡¨§‡≠Å, ‡¨≤‡¨ï‡≠ç‡¨∑‡¨£ ‡¨¶‡≠á‡¨ñ‡¨æ‡¨ó‡¨≤‡≠á ‡¨°‡¨æ‡¨ï‡≠ç‡¨§‡¨∞‡≠Ä ‡¨™‡¨∞‡¨æ‡¨Æ‡¨∞‡≠ç‡¨∂ ‡¨®‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å‡•§"
    }
  };
  
  return messages[language]?.[disease.toLowerCase()] || messages[language]?.default || messages.en.default;
}

/**
 * Dispatch alert via SMS (mock implementation for demonstration)
 */
async function dispatchSMSAlert(message) {
  try {
    // Try Fast2SMS first (India-specific), fallback to Twilio
    const fast2smsResult = await sendFast2SMS('9999999999', message); // Demo number
    
    if (fast2smsResult) {
      console.log('üì± Fast2SMS Alert dispatched:', message.substring(0, 100) + '...');
      return { success: true, sent: 1, errors: [], provider: 'Fast2SMS' };
    } else {
      // Fallback to Twilio or mock
      console.log('üì± SMS Alert dispatched (fallback):', message.substring(0, 100) + '...');
      return { success: true, sent: 1, errors: [], provider: 'Fallback' };
    }
  } catch (error) {
    return { success: false, sent: 0, errors: [error.message] };
  }
}

/**
 * Dispatch alert via WhatsApp (mock implementation for demonstration)
 */
async function dispatchWhatsAppAlert(message, severity = 'medium') {
  try {
    // In a real implementation, this would send to a list of subscribers
    console.log('üì± WhatsApp Alert dispatched:', message.substring(0, 100) + '...');
    
    // Mock successful dispatch with quick action buttons
    const buttons = severity === 'critical' 
      ? ['Call 108', 'First Aid', 'More Info']
      : ['Prevention Tips', 'More Info', 'Emergency'];
    
    return { success: true, sent: 1, errors: [] };
  } catch (error) {
    return { success: false, sent: 0, errors: [error.message] };
  }
}

/**
 * Get recent alerts for statistics
 */
export async function getRecentAlerts(days = 7) {
  try {
    const alerts = await getFromSQLite('alerts');
    
    // Filter alerts from last N days
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);
    
    return alerts.filter(alert => new Date(alert.timestamp) >= cutoffDate);
  } catch (error) {
    console.error('‚ùå Error fetching recent alerts:', error);
    return [];
  }
}